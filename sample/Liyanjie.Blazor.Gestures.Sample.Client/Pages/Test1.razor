@page "/1"

<div class="gesturearea"
     @onpointerdown=@(e=>gestureRecognizer?.PointerDown(e)) @onpointerdown:preventDefault @onpointerdown:stopPropagation
     @onpointermove=@(e=>gestureRecognizer?.PointerMove(e)) @onpointermove:preventDefault @onpointermove:stopPropagation
     @onpointerup=@(e=>gestureRecognizer?.PointerUp(e)) @onpointerup:preventDefault @onpointerup:stopPropagation
     @onpointerleave=@(e=>gestureRecognizer?.PointerLeave(e)) @onpointerleave:preventDefault @onpointerleave:stopPropagation>
    <div class="gesturedata">
        <p>
            时长:@(e?.Duration)<br />
            距离:@(e?.Distance.ToString("0.0"))(X:@(e?.DistanceX.ToString("0.0")),Y:@(e?.DistanceY.ToString("0.0")))<br />
            角度:@(e?.Angle.ToString("0.0"))<br />
            方向:@(e?.Direction)<br />
            数量:@(e?.PointerCount)<br />
            (@(e?.StartPoints[0].ScreenX),@(e?.StartPoints[0].ScreenY))→(@(e?.MovePoints[0].ScreenX),@(e?.MovePoints[0].ScreenY))
        </p>
        <p>@(tap) @(longpress) @(pan) @(swipe)</p>
        <p>@(pinch)</p>
        <p>@(rotate)</p>
    </div>
</div>
<GestureRecognizer @ref=@(gestureRecognizer)
                   Enable=@(true)>
    <TapGestureRecognizer OnTap=@(ShowTapData)
                          AllowDoubleTap=@(true) OnDoubleTap=@(ShowTapData) />
    <LongPressGestureRecognizer OnLongPress=@(ShowLongPressData) />
    <PanGestureRecognizer OnPan=@(ShowPanData) OnPanEnd=@(ShowPanData) />
    <SwipeGestureRecognizer Direction=@(GestureDirection.Horizontal|GestureDirection.Vertical)
                            OnSwipe=@(ShowSwipeData) OnSwipeEnd=@(ShowSwipeData)
                            OnSwipeUp=@(ShowSwipeData) OnSwipeDown=@(ShowSwipeData)
                            OnSwipeLeft=@(ShowSwipeData) OnSwipeRight=@(ShowSwipeData) />
    <PinchGestureRecognizer OnPinch=@(ShowPinchData) OnPinchEnd=@(ShowPinchData) OnPinchIn=@(ShowPinchData) OnPinchOut=@(ShowPinchData) />
    <RotateGestureRecognizer OnRotate=@(ShowRotateData) OnRotateEnd=@(ShowRotateData) OnRotateCW=@(ShowRotateData) OnRotateCCW=@(ShowRotateData) />
</GestureRecognizer>


@code {
    GestureRecognizer? gestureRecognizer;
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender && gestureRecognizer is not null)
        {
            gestureRecognizer.GestureStart += (sender, e) =>
            {
                this.e = null;
                tap = null;
                longpress = null;
                pan = null;
                swipe = null;
                pinch = null;
                rotate = null;
                InvokeAsync(StateHasChanged);
            };
        }
    }

    GestureEventArgs? e;
    void ShowData(GestureEventArgs e)
    {
        this.e = e;
        InvokeAsync(StateHasChanged);
    }

    string? tap;
    void ShowTapData(GestureEventArgs e)
    {
        tap = $"{e.Type}-√; ";
        ShowData(e);
    }
    string? longpress;
    void ShowLongPressData(GestureEventArgs e)
    {
        longpress = $"{e.Type}-√; ";
        ShowData(e);
    }
    string? pan;
    void ShowPanData(PanGestureEventArgs e)
    {
        pan = $"{e.Type}-√; ";
        ShowData(e);
    }
    string? swipe;
    void ShowSwipeData(SwipeGestureEventArgs e)
    {
        swipe = $"{e.Type}-√; ";
        ShowData(e);
    }
    string? pinch;
    void ShowPinchData(PinchGestureEventArgs e)
    {
        pinch = $"{e.Type}-缩放:{e.Scale:0.0}; ";
        ShowData(e);
    }
    string? rotate;
    void ShowRotateData(RotateGestureEventArgs e)
    {
        rotate = $"{e.Type}-旋转:{e.AngleChange:0.0}; ";
        ShowData(e);
    }
}
