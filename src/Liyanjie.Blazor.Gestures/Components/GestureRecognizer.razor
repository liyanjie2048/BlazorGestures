<CascadingValue Value=@(this)>@(ChildContent)</CascadingValue>

@code {
    [Parameter] public bool Enable { get; set; } = true;
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

    Dictionary<long, PointerEventArgs> startPoints { get; set; } = [];
    Dictionary<long, PointerEventArgs> movePoints { get; set; } = [];
    bool hasPrimaryPoint => movePoints.Any(_ => _.Value.IsPrimary);

    public bool Active { get; private set; }
    public DateTime? StartTime { get; private set; }

    public event EventHandler<GestureEventArgs>? GestureStart;
    public event EventHandler<GestureEventArgs>? GestureMove;
    public event EventHandler<GestureEventArgs>? GestureEnd;
    public event EventHandler<GestureEventArgs>? GestureLeave;

    public void PointerDown(PointerEventArgs e)
    {
        if (!Enable)
            return;

        Active = true;
        StartTime = DateTime.Now;

        startPoints[e.PointerId] = e;
        movePoints[e.PointerId] = e;

        GestureStart?.Invoke(this, CreateEventArgs(nameof(GestureStart).ToLower(), e));
    }
    public void PointerMove(PointerEventArgs e)
    {
        if (!Enable)
            return;

        movePoints[e.PointerId] = e;

        if (Active && hasPrimaryPoint)
            GestureMove?.Invoke(this, CreateEventArgs(nameof(GestureMove).ToLower(), e));
    }
    public void PointerUp(PointerEventArgs e)
    {
        if (Active && hasPrimaryPoint)
            GestureEnd?.Invoke(this, CreateEventArgs(nameof(GestureEnd).ToLower(), e));

        Clear(e);
    }
    public void PointerLeave(PointerEventArgs e)
    {
        if (Active && hasPrimaryPoint)
            GestureLeave?.Invoke(this, CreateEventArgs(nameof(GestureLeave).ToLower(), e));

        Clear(e);
    }
    void Clear(PointerEventArgs e)
    {
        if (e.IsPrimary)
        {
            Active = false;
            StartTime = null;
        }
        startPoints.Remove(e.PointerId);
        movePoints.Remove(e.PointerId);
    }

    GestureEventArgs CreateEventArgs(string type, PointerEventArgs e) => new(
        type,
        StartTime!.Value,
        startPoints.Values.OrderBy(_ => _.PointerId).ToArray(),
        movePoints.Values.OrderBy(_ => _.PointerId).ToArray());
}
