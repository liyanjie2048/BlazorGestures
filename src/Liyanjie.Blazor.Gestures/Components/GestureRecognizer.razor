<CascadingValue Value=@(this)>@(ChildContent)</CascadingValue>

@code {
    [Parameter] public bool Enable { get; set; } = true;
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

    Dictionary<long, GesturePoint> startPoints { get; set; } = [];
    Dictionary<long, GesturePoint> movePoints { get; set; } = [];

    public bool Started { get; private set; }
    public DateTime? StartTime { get; private set; }

    public event EventHandler<GestureEventArgs>? GestureStart;
    public event EventHandler<GestureEventArgs>? GestureMove;
    public event EventHandler<GestureEventArgs>? GestureEnd;

    public void PointerStart(PointerEventArgs e)
    {
        if (!Enable)
            return;

        Started = true;
        StartTime = DateTime.Now;

        startPoints[e.PointerId] = GetTouchPoint(e);
        movePoints[e.PointerId] = GetTouchPoint(e);

        GestureStart?.Invoke(this, CreateEventArgs(e));
    }
    public void PointerMove(PointerEventArgs e)
    {
        if (!Enable)
            return;

        if (!Started)
            return;

        movePoints[e.PointerId] = GetTouchPoint(e);

        GestureMove?.Invoke(this, CreateEventArgs(e));
    }
    public void PointerEnd(PointerEventArgs e)
    {
        if (!Enable)
            return;

        if (!Started)
            return;

        GestureEnd?.Invoke(this, CreateEventArgs(e));

        startPoints.Remove(e.PointerId);
        movePoints.Remove(e.PointerId);
        if (startPoints.Count == 0 || movePoints.Count == 0)
        {
            Started = false;
            StartTime = null;
        }
    }

    GestureEventArgs CreateEventArgs(PointerEventArgs e)
    {
        return new()
            {
                Type = e.Type,
                StartPoints = startPoints.Values.OrderBy(_ => _.Identifier).ToArray(),
                MovePoints = movePoints.Values.OrderBy(_ => _.Identifier).ToArray(),
                StartTime = StartTime,
            };
    }

    static GesturePoint GetTouchPoint(PointerEventArgs e)
    {
        return new(e.PointerId, e.ClientX, e.ClientY);
    }
}
